// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PointOfSaleMVC.Data;

#nullable disable

namespace PointOfSaleMVC.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231128091400_addCategoryTable")]
    partial class addCategoryTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PointOfSaleMVC.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("PointOfSaleMVC.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Category 1",
                            Price = 10
                        },
                        new
                        {
                            Id = 2,
                            Name = "Category 2",
                            Price = 20
                        },
                        new
                        {
                            Id = 3,
                            Name = "Category 3",
                            Price = 30
                        },
                        new
                        {
                            Id = 4,
                            Name = "Category 4",
                            Price = 40
                        },
                        new
                        {
                            Id = 5,
                            Name = "Category 5",
                            Price = 50
                        },
                        new
                        {
                            Id = 6,
                            Name = "Category 6",
                            Price = 60
                        },
                        new
                        {
                            Id = 7,
                            Name = "Category 7",
                            Price = 70
                        },
                        new
                        {
                            Id = 8,
                            Name = "Category 8",
                            Price = 80
                        },
                        new
                        {
                            Id = 9,
                            Name = "Category 9",
                            Price = 90
                        },
                        new
                        {
                            Id = 10,
                            Name = "Category 10",
                            Price = 100
                        },
                        new
                        {
                            Id = 11,
                            Name = "Category 11",
                            Price = 110
                        },
                        new
                        {
                            Id = 12,
                            Name = "Category 12",
                            Price = 120
                        },
                        new
                        {
                            Id = 13,
                            Name = "Category 13",
                            Price = 130
                        },
                        new
                        {
                            Id = 14,
                            Name = "Category 14",
                            Price = 140
                        },
                        new
                        {
                            Id = 15,
                            Name = "Category 15",
                            Price = 150
                        },
                        new
                        {
                            Id = 16,
                            Name = "Category 16",
                            Price = 160
                        },
                        new
                        {
                            Id = 17,
                            Name = "Category 17",
                            Price = 170
                        },
                        new
                        {
                            Id = 18,
                            Name = "Category 18",
                            Price = 180
                        },
                        new
                        {
                            Id = 19,
                            Name = "Category 19",
                            Price = 190
                        },
                        new
                        {
                            Id = 20,
                            Name = "Category 20",
                            Price = 200
                        },
                        new
                        {
                            Id = 21,
                            Name = "Category 21",
                            Price = 210
                        },
                        new
                        {
                            Id = 22,
                            Name = "Category 22",
                            Price = 220
                        },
                        new
                        {
                            Id = 23,
                            Name = "Category 23",
                            Price = 230
                        },
                        new
                        {
                            Id = 24,
                            Name = "Category 24",
                            Price = 240
                        },
                        new
                        {
                            Id = 25,
                            Name = "Category 25",
                            Price = 250
                        },
                        new
                        {
                            Id = 26,
                            Name = "Category 26",
                            Price = 260
                        },
                        new
                        {
                            Id = 27,
                            Name = "Category 27",
                            Price = 270
                        },
                        new
                        {
                            Id = 28,
                            Name = "Category 28",
                            Price = 280
                        },
                        new
                        {
                            Id = 29,
                            Name = "Category 29",
                            Price = 290
                        },
                        new
                        {
                            Id = 30,
                            Name = "Category 30",
                            Price = 300
                        },
                        new
                        {
                            Id = 31,
                            Name = "Category 31",
                            Price = 310
                        },
                        new
                        {
                            Id = 32,
                            Name = "Category 32",
                            Price = 320
                        },
                        new
                        {
                            Id = 33,
                            Name = "Category 33",
                            Price = 330
                        },
                        new
                        {
                            Id = 34,
                            Name = "Category 34",
                            Price = 340
                        },
                        new
                        {
                            Id = 35,
                            Name = "Category 35",
                            Price = 350
                        },
                        new
                        {
                            Id = 36,
                            Name = "Category 36",
                            Price = 360
                        },
                        new
                        {
                            Id = 37,
                            Name = "Category 37",
                            Price = 370
                        },
                        new
                        {
                            Id = 38,
                            Name = "Category 38",
                            Price = 380
                        },
                        new
                        {
                            Id = 39,
                            Name = "Category 39",
                            Price = 390
                        },
                        new
                        {
                            Id = 40,
                            Name = "Category 40",
                            Price = 400
                        },
                        new
                        {
                            Id = 41,
                            Name = "Category 41",
                            Price = 410
                        },
                        new
                        {
                            Id = 42,
                            Name = "Category 42",
                            Price = 420
                        },
                        new
                        {
                            Id = 43,
                            Name = "Category 43",
                            Price = 430
                        },
                        new
                        {
                            Id = 44,
                            Name = "Category 44",
                            Price = 440
                        },
                        new
                        {
                            Id = 45,
                            Name = "Category 45",
                            Price = 450
                        },
                        new
                        {
                            Id = 46,
                            Name = "Category 46",
                            Price = 460
                        },
                        new
                        {
                            Id = 47,
                            Name = "Category 47",
                            Price = 470
                        },
                        new
                        {
                            Id = 48,
                            Name = "Category 48",
                            Price = 480
                        },
                        new
                        {
                            Id = 49,
                            Name = "Category 49",
                            Price = 490
                        },
                        new
                        {
                            Id = 50,
                            Name = "Category 50",
                            Price = 500
                        },
                        new
                        {
                            Id = 51,
                            Name = "Category 51",
                            Price = 510
                        },
                        new
                        {
                            Id = 52,
                            Name = "Category 52",
                            Price = 520
                        },
                        new
                        {
                            Id = 53,
                            Name = "Category 53",
                            Price = 530
                        },
                        new
                        {
                            Id = 54,
                            Name = "Category 54",
                            Price = 540
                        },
                        new
                        {
                            Id = 55,
                            Name = "Category 55",
                            Price = 550
                        },
                        new
                        {
                            Id = 56,
                            Name = "Category 56",
                            Price = 560
                        },
                        new
                        {
                            Id = 57,
                            Name = "Category 57",
                            Price = 570
                        },
                        new
                        {
                            Id = 58,
                            Name = "Category 58",
                            Price = 580
                        },
                        new
                        {
                            Id = 59,
                            Name = "Category 59",
                            Price = 590
                        },
                        new
                        {
                            Id = 60,
                            Name = "Category 60",
                            Price = 600
                        });
                });

            modelBuilder.Entity("PointOfSaleMVC.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Bytes")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Size")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("PointOfSaleMVC.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ManufactoringDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PointOfSaleMVC.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PointOfSaleMVC.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PointOfSaleMVC.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PointOfSaleMVC.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PointOfSaleMVC.Models.Photo", b =>
                {
                    b.HasOne("PointOfSaleMVC.Models.Product", "Product")
                        .WithMany("Photos")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PointOfSaleMVC.Models.Product", b =>
                {
                    b.Navigation("Photos");
                });
#pragma warning restore 612, 618
        }
    }
}
